/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/locations/businessUnits/all": {
    /** @description get all business units */
    get: {
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["BusinessUnitCollection"];
          };
        };
      };
    };
  };
  "/auth/user/profile": {
    /** @description get the authenticated user's profile */
    get: {
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/persons/driver/search": {
    /** @description person (personType = driver) search */
    get: {
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["DriverSearchPageable"];
          };
        };
      };
    };
  };
  "/places/search": {
    /** @description place search */
    get: {
      parameters: {
        query: {
          /** @description filter for place types */
          placeTypes?: (string)[];
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["PlaceSearchPageable"];
          };
        };
      };
    };
  };
  "/tasks/search": {
    /** @description task search */
    get: {
      parameters: {
        query: {
          /** @description filter for task types */
          taskTypes?: (string)[];
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["TaskSearchPageable"];
          };
        };
      };
    };
  };
  "/vehicles/search": {
    /** @description vehicle search */
    get: {
      parameters: {
        query: {
          /** @description filter for vehicle types */
          vehicleTypes?: (string)[];
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["VehicleSearchPageable"];
          };
        };
      };
    };
  };
  "/vehicles/gps/boundingbox": {
    /** @description get GPS coordinates for vehicles */
    get: {
      parameters: {
        query: {
          /** @description The lower longitude value */
          lowerLongitude?: number;
          /** @description The lower latitude value */
          lowerLatitude?: number;
          /** @description The upper longitude value */
          upperLongitude?: number;
          /** @description The upper latitude value */
          upperLatitude?: number;
          /** @description filter for specific vehicle types */
          vehicleTypes?: (string)[];
          /** @description filter for specific vehicles */
          vehicleIds?: (string)[];
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": (components["schemas"]["VehicleEventFeature"])[];
          };
        };
      };
    };
  };
  "/vehicles/{vehicleId}/gps/{eventId}/task": {
    /** @description get the task for a specific vehicle and gps event */
    get: {
      parameters: {
        path: {
          vehicleId: string;
          eventId: string;
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["VehicleEventRouteTaskNearbyStopDriver"];
          };
        };
      };
    };
  };
  "/tasks/routes/{routeId}/task": {
    /** @description get the daily task */
    get: {
      parameters: {
        query: {
          /** @description the task date */
          taskDate?: string;
        };
        path: {
          routeId: number;
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["RouteTaskNearbyStopDriverVehicleEvent"];
          };
        };
      };
    };
  };
  "/tasks/{taskId}/runs/stops": {
    /** @description get a specific route details (route, runs, stops) */
    get: {
      parameters: {
        path: {
          taskId: string;
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["RouteTaskRunStop"];
          };
        };
      };
    };
  };
  "/tasks/{taskId}/gps/{runId}/latest": {
    /** @description get latest GPS data for a specific task */
    get: {
      parameters: {
        path: {
          taskId: string;
          /** @description the task run */
          runId: string;
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["RouteTaskStopEventVehicleFeature"];
          };
        };
      };
    };
  };
  "/tasks/{taskId}/gps/{runId}/replay": {
    /** @description get replay GPS data for a specific task and run */
    get: {
      parameters: {
        path: {
          taskId: string;
          /** @description the task run */
          runId: string;
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["RouteTaskStopEventVehicleFeature"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    BusinessUnit: {
      id?: number;
      name?: string;
    };
    BusinessUnitCollection: (components["schemas"]["BusinessUnit"])[];
    Driver: components["schemas"]["Person"] & {
      contactPhoneNumber?: string;
      /** Format: date-time */
      scheduledStartTime?: string;
      /** Format: date-time */
      scheduledEndTime?: string;
      signInType?: string;
      signInCode?: string;
      /** Format: date-time */
      signInTime?: string;
      signOutType?: string;
      signOutCode?: string;
      /** Format: date-time */
      signOutTime?: string;
    };
    DriverSearch: components["schemas"]["Driver"] & {
      tasks?: (components["schemas"]["TaskVehicle"])[];
    };
    Person: {
      id?: string;
      firstName?: string;
      middleName?: string;
      lastName?: string;
    };
    Place: Record<string, never>;
    PlaceSearch: components["schemas"]["Place"];
    RouteTaskNearbyStop: components["schemas"]["Task"] & {
      /**
       * Format: uuid 
       * @description active run based on time (e.g. before task = first run, after task = last run, during task = en route run)
       */
      runId?: string;
      runName?: string;
      runCode?: string;
      runType?: string;
      /** Format: int16 */
      completeRuns?: number;
      /** Format: int16 */
      totalRuns?: number;
      nextStop?: components["schemas"]["Stop"];
      previousStop?: components["schemas"]["Stop"];
    };
    RouteTaskNearbyStopDriver: components["schemas"]["RouteTaskNearbyStop"] & {
      driver?: components["schemas"]["Driver"];
    };
    RouteTaskNearbyStopDriverVehicleEvent: components["schemas"]["RouteTaskNearbyStopDriver"] & {
      vehicle?: components["schemas"]["VehicleEvent"];
    };
    RouteTaskRunStop: components["schemas"]["Task"] & {
      runs?: (components["schemas"]["RunStop"])[];
    };
    RouteTaskStopEventVehicleFeature: components["schemas"]["Task"] & ({
      /** @description GeoJson feature containing the vehicle GPS coordinates. */
      coordinates: components["schemas"]["FeatureCoordinates"];
      /** @description Dictionary of GeoJson feature collections. The key represents the event type, and the values are the GeoJson coordinates where each event occured. Each event feature contains properties such as [TODO]. */
      events: {
        [key: string]: components["schemas"]["FeatureCollection"] | undefined;
      };
      /** @description GeoJson feature collection where every stop is a feature in the collection. Each stop feature contains properties such as type (origin, destination, pickup, waypoint), status (open, completed, skipped), scheduled arrival time, actual arrival time, scheduled departure time, etc. */
      stops: components["schemas"]["FeatureCollection"];
      vehicle: components["schemas"]["VehicleEventFeature"];
    });
    Run: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      templateId?: string;
      name?: string;
      description: string;
      code?: string;
      type?: string;
      status: string;
      /** Format: date-time */
      scheduledStartTime?: string;
      /** Format: date-time */
      actualStartTime?: string;
      /** Format: date-time */
      scheduledEndTime?: string;
      /** Format: date-time */
      actualEndTime?: string;
    };
    RunStop: components["schemas"]["Run"] & {
      stops?: (components["schemas"]["Stop"])[];
    };
    Stop: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      templateId?: string;
      type?: string;
      status?: string;
      name?: string;
      description?: string;
      /** Format: int16 */
      number?: number;
      performed?: string;
      /** Format: date-time */
      scheduledArrivalTime?: string;
      /** Format: date-time */
      estimatedArrivalTime?: string;
      /** Format: date-time */
      actualArrivalTime?: string;
      /** Format: date-time */
      scheduledDepartureTime?: string;
      /** Format: date-time */
      actualDepartureTime?: string;
    };
    /** @description GeoJson 'Feature' object for a stop */
    StopFeature: components["schemas"]["GeoJsonObject"] & ({
      geometry: (Record<string, unknown> | null) & components["schemas"]["Point"];
      properties: components["schemas"]["Stop"];
      id?: number | string;
    });
    Task: {
      /** Format: uuid */
      id?: string;
      name?: string;
      routeId?: number;
      routeName?: string;
      /** Format: uuid */
      templateId?: string;
      templateName?: string;
      type?: string;
      status?: string;
      /** Format: date-time */
      scheduledStartTime?: string;
      /** Format: date-time */
      actualStartTime?: string;
      /** Format: date-time */
      scheduledEndTime?: string;
      /** Format: date-time */
      actualEndTime?: string;
      totalRuns: number;
      completedRuns: number;
    };
    TaskDriver: components["schemas"]["Task"] & {
      driver?: components["schemas"]["Driver"];
    };
    TaskDriverVehicle: components["schemas"]["Task"] & {
      driver?: components["schemas"]["Driver"];
      vehicle?: components["schemas"]["Vehicle"];
    };
    TaskSearch: components["schemas"]["TaskDriverVehicle"];
    TaskVehicle: components["schemas"]["Task"] & {
      vehicle?: components["schemas"]["Vehicle"];
    };
    User: components["schemas"]["Person"] & {
      assignedBusinessUnitId?: number;
    };
    Vehicle: {
      id: string;
      type?: string;
      assetNumber: string;
      fleetNumber?: string;
    };
    VehicleEvent: components["schemas"]["Vehicle"] & {
      /** Format: double */
      heading: number;
      /** Format: int16 */
      speed?: number;
      speedUnit?: string;
      /** Format: uuid */
      eventId: string;
      eventType?: string;
      /** Format: date-time */
      eventStartTime?: string;
      /** Format: date-time */
      eventEndTime: string;
    };
    /** @description GeoJson 'Feature' object for a vehicle */
    VehicleEventFeature: components["schemas"]["GeoJsonObject"] & {
      geometry: components["schemas"]["Point"];
      properties: components["schemas"]["VehicleEvent"];
      id: string;
    };
    VehicleEventRouteTaskNearbyStopDriver: components["schemas"]["VehicleEvent"] & {
      task: components["schemas"]["RouteTaskNearbyStopDriver"];
    };
    VehicleSearch: components["schemas"]["Vehicle"] & {
      tasks?: (components["schemas"]["TaskDriver"])[];
    };
    Pageable: {
      /** Format: int32 */
      offset?: number;
      /** Format: int32 */
      limit?: number;
      /** Format: int64 */
      total?: number;
      sort?: (string)[];
    };
    DriverSearchPageable: components["schemas"]["Pageable"] & {
      items?: (components["schemas"]["DriverSearch"])[];
    };
    PlaceSearchPageable: components["schemas"]["Pageable"] & {
      items?: (components["schemas"]["PlaceSearch"])[];
    };
    TaskSearchPageable: components["schemas"]["Pageable"] & {
      items?: (components["schemas"]["TaskSearch"])[];
    };
    VehicleSearchPageable: components["schemas"]["Pageable"] & {
      items?: (components["schemas"]["VehicleSearch"])[];
    };
    /** @description GeoJson object The coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level. */
    GeoJsonObject: {
      /** @enum {string} */
      type: "Feature" | "FeatureCollection" | "Point" | "MultiPoint" | "LineString" | "MultiLineString" | "Polygon" | "MultiPolygon" | "GeometryCollection";
      /** @description A GeoJSON object MAY have a member named "bbox" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries. */
      bbox?: (number)[];
    };
    /** @description Abstract type for all GeoJson object except Feature and FeatureCollection */
    Geometry: components["schemas"]["GeoJsonObject"] & ({
      /** @enum {string} */
      type: "Point" | "MultiPoint" | "LineString" | "MultiLineString" | "Polygon" | "MultiPolygon" | "GeometryCollection";
    });
    /** @description Abstract type for all GeoJson 'Geometry' object the type of which is not 'GeometryCollection' */
    GeometryElement: components["schemas"]["Geometry"] & ({
      /** @enum {string} */
      type: "Point" | "MultiPoint" | "LineString" | "MultiLineString" | "Polygon" | "MultiPolygon";
    });
    /** @description GeoJson 'Feature' object */
    Feature: components["schemas"]["GeoJsonObject"] & ({
      geometry: (Record<string, unknown> | null) & components["schemas"]["Geometry"];
      properties: Record<string, unknown> | null;
      id?: number | string;
    });
    /** @description GeoJson 'FeatureCollection' object */
    FeatureCollection: components["schemas"]["GeoJsonObject"] & {
      features: (components["schemas"]["Feature"])[];
    };
    /** @description GeoJson 'FeatureCoordinates' object */
    FeatureCoordinates: components["schemas"]["GeoJsonObject"] & ({
      /** @enum {string} */
      type: "Feature";
      geometry: (Record<string, unknown> | null) & components["schemas"]["Geometry"];
    });
    /** @description GeoJson fundamental geometry construct. A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element. Implementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as "M") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers. */
    Position: (number)[];
    /** @description GeoJson fundamental geometry construct, array of two or more positions. */
    LineStringCoordinates: (components["schemas"]["Position"])[];
    /** @description A linear ring is a closed LineString with four or more positions. The first and last positions are equivalent, and they MUST contain identical values; their representation SHOULD also be identical. A linear ring is the boundary of a surface or the boundary of a hole in a surface. A linear ring MUST follow the right-hand rule with respect to the area it bounds, i.e., exterior rings are counterclockwise, and holes are clockwise. */
    LinearRing: (components["schemas"]["Position"])[];
    /** @description GeoJson geometry */
    Point: components["schemas"]["GeometryElement"] & {
      /** @enum {string} */
      type: "Point";
      coordinates: components["schemas"]["Position"];
    };
    /** @description GeoJson geometry */
    MultiPoint: components["schemas"]["GeometryElement"] & {
      coordinates: (components["schemas"]["Position"])[];
    };
    /** @description GeoJson geometry */
    LineString: components["schemas"]["GeometryElement"] & {
      coordinates: components["schemas"]["LineStringCoordinates"];
    };
    /** @description GeoJson geometry */
    MultiLineString: components["schemas"]["GeometryElement"] & {
      coordinates: (components["schemas"]["LineStringCoordinates"])[];
    };
    /** @description GeoJson geometry */
    Polygon: components["schemas"]["GeometryElement"] & {
      coordinates: (components["schemas"]["LinearRing"])[];
    };
    /** @description GeoJson geometry */
    MultiPolygon: components["schemas"]["GeometryElement"] & {
      coordinates: ((components["schemas"]["LinearRing"])[])[];
    };
    /** @description GeoJson geometry collection GeometryCollections composed of a single part or a number of parts of a single type SHOULD be avoided when that single part or a single object of multipart type (MultiPoint, MultiLineString, or MultiPolygon) could be used instead. */
    GeometryCollection: components["schemas"]["Geometry"] & {
      geometries: (components["schemas"]["GeometryElement"])[];
    };
  };
  responses: {
  };
  parameters: {
    /** @description GPS time filter */
    gpsEventTime: string;
    limit: number;
    offset: number;
    /** @description The search query */
    query: string;
    /** @description search date filter */
    searchDate: string;
    /** @example <property>,[asc|desc] */
    sort: (string)[];
  };
  requestBodies: never;
  headers: {
  };
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
